"use strict";(self.webpackChunkwknd_nation=self.webpackChunkwknd_nation||[]).push([[5523],{35523:function(t,e,i){i.r(e);i(68309);var n=i(2934),a=i.n(n),l=i(11235);a().component("text-input",{props:{name:String,label:String,ariaLabelledBy:String,type:{type:String,default:"text"},modifier:{type:String,default:"default"},autocorrect:Boolean,autocapitalize:Boolean,initialValueGetter:Function,placeholder:String,error:String,required:Boolean,validateMethod:Function,srOnly:Boolean},data:function(){var t={isValid:!0,isActive:!1,showErrorMessage:!1,randomID:"text-input-"+Math.floor(1e3*Math.random()),errorText:(0,l.Jx)(this.error)};return this.initialValueGetter&&"undefined"!==this.initialValueGetter.bind?t.inputValue=this.initialValueGetter(this.name):t.inputValue="",t},watch:{inputValue:function(){this.$emit("change",{value:this.inputValue,name:this.name})}},mounted:function(){this.$emit("change",{value:this.inputValue,name:this.name}),this.inputValue&&this.setActive()},methods:{validate:function(){return this.validateMethod?this.isValid=this.validateMethod({value:this.inputValue,name:this.name}):this.required&&!this.inputValue?this.isValid=!1:this.isValid=!0,this.isValid},setActive:function(){this.isActive=!0},unsetActive:function(){this.inputValue||(this.isActive=!1)},refresh:function(){var t=this;setTimeout((function(){t.inputValue=t.$refs.input.value,t.inputValue&&t.setActive()}),0)}},template:'\n  <div class="text-input" :class="[\'text-input--\' + modifier, {\'has-error\': !isValid}]">\n    <div class="text-input__wrapper">\n      <label\n        v-if="label || modifier === \'default\'"\n        :for="randomID"\n        :class="[\'text-input__label\', {\'is-active\': isActive, \'sr-only\': srOnly}]">\n        {{(label ? label : placeholder)}}\n      </label>\n      <input\n        ref="input"\n        class="text-input__el p2"\n        :id="randomID"\n        :type="type"\n        :name="name"\n        :ariaLabelledBy="ariaLabelledBy"\n        :autocorrect="autocorrect"\n        :autocapitalize="autocapitalize"\n        :placeholder="placeholder"\n        v-model="inputValue"\n        v-on:input="$emit(\'input\', $event.target.value)"\n        v-on:focus="setActive"\n        v-on:blur="unsetActive" />\n    </div>\n    <transition name="fade">\n      <p v-if="!isValid" class="text-input__error red" v-html="errorText"></p>\n    </transition>\n  </div>'})}}]);